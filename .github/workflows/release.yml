name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: rustch
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: rustch
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: rustch
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: rustch
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: rustch

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Build
      run: |
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target ${{ matrix.target }}

    - name: Package binary
      run: |
        mkdir -p dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }}.exe dist/
          cd dist && tar -czf ${{ matrix.binary_name }}-${{ matrix.target }}.tar.gz ${{ matrix.binary_name }}.exe
        else
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} dist/
          cd dist && tar -czf ${{ matrix.binary_name }}-${{ matrix.target }}.tar.gz ${{ matrix.binary_name }}
        fi

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: dist/${{ matrix.binary_name }}-${{ matrix.target }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-cargo:
    name: Publish to Cargo
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
